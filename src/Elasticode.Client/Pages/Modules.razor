@page "/modules"
<h3>Modules</h3>
@rendermode InteractiveWebAssembly

@implements IDisposable

@inject IJSRuntime js
@inject ModuleClient moduleApi
@inject AppViewModel app

<div id="container"></div>

<ModuleExplorer Modules="@displayedModules" />

@code {
    private Dictionary<string, ModuleModel> modules = new();
    private IEnumerable<ModuleModel>? displayedModules = default;

    protected override void OnInitialized() {
        app.GlobalSearchTextChanged += OnGlobalSearchTextChanged;
    }

    private void OnGlobalSearchTextChanged(object? sender, string? searchText) {
        displayedModules = FilterModules(modules, searchText);
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync() {
        var response = await moduleApi.GetModulesAsync();
        modules = response.ToDictionary(x => x.Name);
        displayedModules = FilterModules(modules, app.GlobalSearchText);
    }

    private static IEnumerable<ModuleModel>? FilterModules(Dictionary<string, ModuleModel> map, string? searchText) {
        if (string.IsNullOrEmpty(searchText)) 
        {
            return map.Values;
        }

        var focusedModuleNames = map
            .Keys
            .Where(x => x.Contains(searchText)) ?? []
        ;

        var collector = new HashSet<string>();

        foreach (var moduleName in focusedModuleNames) 
        {
            AddRecursive(collector, map, moduleName);
        }

        return map
            .Where(x => collector.Contains(x.Key))
            .Select(x => x.Value)
            .ToArray()
        ;
    }
    private static void AddRecursive(HashSet<string> collector, Dictionary<string, ModuleModel> map, string name) {
        if (collector.Contains(name)) {
            return;
        }

        collector.Add(name);

        var module = map[name];

        foreach (var usedModuleName in module.Uses) {
            AddRecursive(collector, map, usedModuleName);
        }
    }

    public void Dispose() => Dispose(true);

    private void Dispose(bool disposing) {
        if (disposing) {
            app.GlobalSearchTextChanged -= OnGlobalSearchTextChanged;
        }
    }
}
