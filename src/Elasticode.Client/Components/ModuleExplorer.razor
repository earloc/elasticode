
@rendermode InteractiveWebAssembly
@inject IJSRuntime js

<style>

.link {
  stroke: #000;
  stroke-width: 1.0px;
}

.node {
  cursor: move;
  fill: #ccc;
  stroke: #000;
  stroke-width: 1.0px;
}

.node.fixed {
  stroke: #00f;
}

.text {
  stroke-width: 0.5px;
}

</style>

<div id="container"></div>

<script src=".d3/d3.min.js"></script>
<script>

    function showGraph() {
        const graph = ({
            nodes: Array.from({ length: 13 }, () => ({ name: "hello world2"})),
            links: [
                { source: 0, target: 1 },
                { source: 1, target: 2 },
                { source: 2, target: 0 },
                { source: 1, target: 3 },
                { source: 3, target: 2 },
                { source: 3, target: 4 },
                { source: 4, target: 5 },
                { source: 5, target: 6 },
                { source: 5, target: 7 },
                { source: 6, target: 7 },
                { source: 6, target: 8 },
                { source: 7, target: 8 },
                { source: 9, target: 4 },
                { source: 9, target: 11 },
                { source: 9, target: 10 },
                { source: 10, target: 11 },
                { source: 11, target: 12 },
                { source: 12, target: 10 }
            ]
        });

        function tick() {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);
            node
                .attr("transform", (d) => `translate(${d.x - (d.name.length * 6)}, ${d.y - 8})`)
        }

        function click(event, d) {
            delete d.fx;
            delete d.fy;
            d3.select(this).classed("fixed", false);
            simulation.alpha(1).restart();
        }

        function dragstart() {
            d3.select(this).classed("fixed", true);
        }

        function dragged(event, d) {
            d.fx = clamp(event.x, 0, width);
            d.fy = clamp(event.y, 0, height);
            simulation.alpha(1).restart();
        }

        function clamp(x, lo, hi) {
            return x < lo ? lo : x > hi ? hi : x;
        }

        const height = 500;
        const width = 500;

        const svg = d3.create("svg").attr("viewBox", [0, 0, width, height]),
            link = svg
                .selectAll(".link")
                .data(graph.links)
                .join("line")
                .classed("link", true)
        ;

        const node = svg
            .selectAll(".node")
            .data(graph.nodes)
            .join("g")
            .classed("node", true)
            .classed("fixed", d => d.fx !== undefined)
        ;

        node.append("rect")
            .attr("width", d => d.name.length * 12)
            .attr("height", 16)
        ;

        node.append("text")
            .attr("dy", ".80em")
            .attr("dx", ".40em")
            .classed("text", true)
            .text(d => d.name)
        ;

        const simulation = d3
            .forceSimulation()
            .nodes(graph.nodes)
            .force("charge", d3.forceManyBody())
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("link", d3.forceLink(graph.links))
            .on("tick", tick)
        ;

        const drag = d3
            .drag()
            .on("start", dragstart)
            .on("drag", dragged)
        ;

        node.call(drag).on("click", click);

        document.getElementById("container").append(svg.node());
    }
</script>

@code {

  [Parameter] public object? Graph { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    await js.InvokeVoidAsync("showGraph");
  }

}
