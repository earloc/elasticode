
@rendermode InteractiveWebAssembly
@inject IJSRuntime js


<style>

.link {
  stroke: #000;
  stroke-width: 1.0px;
}

.node {
  cursor: move;
  fill: #ccc;
  stroke: #000;
  stroke-width: 1.0px;
}

.node.fixed {
  stroke: #00f;
}

.text {
  stroke-width: 0.5px;
}

.guide {
  stroke: #00F;
  stroke-width: 0.1px;
  stroke-dasharray: 1,1
}

.guide2 {
  stroke: #F00;
}

</style>

<div id="container"></div>

<script src="d3/d3.min.js" ></script>

<script>
    function showGraph(graph, withGuideLines) {
    console.log(withGuideLines);
    const boundingBoxWidthFactor = 12;
    const boundingBoxHeight = 20;

    function calcSlopeDegrees(p0, p1) {
        // https://www.mathebibel.de/steigungswinkel
        const opposite = p1.y - p0.y;
        const adjacent = p1.x - p0.x;
        const m = opposite / adjacent;
        const radians = Math.atan(m);
        const degrees = radians * (180 / Math.PI);
        return degrees ?? 90;
    }

    @* function calcRotationOffset(p0, p1) {
        if (p0.x <= p1.x) {
            return 90;
        }
        return -90;
    } *@

    @* function calcTargetOffset(d) {
        const sourceWidth = d.source.name.length * boundingBoxWidthFactor;
        const sourceHalfWidth = sourceWidth / 2;
        const sourceX0 = d.source.x;
        const sourceX1 = d.source.x + sourceHalfWidth;
        const minSourceX = Math.min(sourceX0, sourceX1);
        const maxSourceX = Math.max(sourceX0, sourceX1);

        const targetWidth = d.target.name.length * boundingBoxWidthFactor;
        const targetHalfWidth = targetWidth / 2;
        const targetX0 = d.target.x;
        const targetX1 = d.target.x + targetWidth;
        const minTargetX = Math.min(targetX0, targetX1);
        const maxTargetX = Math.max(targetX0, targetX1);

        let offsetY = 0;
        if (d.source.y < d.target.y) {
            offsetY = 10;
        }

        if (d.source.y > d.target.y)
            offsetY = -10;
        }

        if (maxSourceX < minTargetX) {
            // source is left of target
            return { x: targetHalfWidth, y: 0 };
        }

        if (minSourceX > maxTargetX) {
            // source is right of target
            return { x: targetWidth + targetHalfWidth, y: 0 };
        }

        return { x: targetWidth, y: 0 };
    } *@

    @* function calcSourceOffsetX(d) {
        const width = d.source.name.length * boundingBoxWidthFactor;
        const halfWidth = width / 2;

        const sourceX = d.source.x - halfWidth;
        const targetX = d.target.x - halfWidth;

        if (sourceX > targetX) {
            return halfWidth;
        }
        else {
            return width + halfWidth;
        }
    } *@

    @* function transformJoint(joint) {
        const sourceOffsetX = calcSourceOffsetX(joint);
        const targetOffset = calcTargetOffset(joint);
        const slopeDegrees = calcSlopeDegrees(joint.source, joint.target, sourceOffsetX, targetOffset.x);
        const rotationOffset = calcRotationOffset(joint.source, joint.target);

        return `translate(${joint.target.x + targetOffset.x}, ${joint.target.y + targetOffset.y}) rotate(${rotationOffset + slopeDegrees})`;
    } *@

        function tick() {
            link
                .datum(d => {
                    const sourceWidth = d.source.name.length * boundingBoxWidthFactor;
                    const targetWidth = d.target.name.length * boundingBoxWidthFactor;
                    const height = 20;

                    const sourceCenter = { x: d.source.x + (width / 2), y: d.source.y + (height / 2) };
                    const sourceOffset = { x: 0, y: 0 };

                    const targetCenter = { x: d.target.x + (width / 2), y: d.target.y + (height / 2) };
                    const targetOffset = { x: 0, y: 0 };

                    const slopeDegrees = calcSlopeDegrees(sourceCenter, targetCenter);

                    if (slopeDegrees <= 45 && slopeDegrees >= -45  ) {
                       
                    }
                    else {
                        sourceOffset.x = sourceWidth / 2;
                        targetOffset.x = targetWidth / 2;
                    }

                    const more = {
                        p0: 
                        { 
                            x: d.source.x + sourceOffset.x,
                            y: d.source.y + 10 
                        }, 
                        p1: 
                        { 
                            x: d.target.x + targetOffset.x,
                            y: d.target.y + 10 
                        }
                    };

                    const datum = {...d, ...more };
                    return datum;
                })
                @* {
                    p0: 
                    { 
                        x: d.source.x, 
                        y: d.source.y + 10 
                    }, 
                    p1: 
                    { 
                        x: d.source.x, 
                        y: d.source.y + 10 
                    }
                }) *@
                .attr("x1", d => d.p0.x)
                .attr("y1", d => d.p0.y)
                .attr("x2", d => d.p1.x)
                .attr("y2", d => d.p1.y)
            ;
            @* joint
                .attr("transform", (d) => transformJoint(d))
            ; *@
            node
                //.attr("transform", (d) => `translate(${d.x + (d.name.length * boundingBoxWidthFactor) / 2}, ${d.y - (boundingBoxHeight / 2)})`)
                .attr("transform", (d) => `translate(${d.x}, ${d.y})`)

            ;

            if (withGuideLines) {

                guideX
                    .attr("x1", d => d.x - 1000)
                    .attr("y1", d => d.y + 10)
                    .attr("x2", d => d.x + 1000)
                    .attr("y2", d => d.y + 10)
                ;

                guideY
                    .attr("x1", d => d.x + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y1", d => d.y - 1000)
                    .attr("x2", d => d.x + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y2", d => d.y + 1000)
                ;

                guideA
                    .attr("x1", d => d.x - 1000 + (d.name.length * boundingBoxWidthFactor) / 2 )
                    .attr("y1", d => d.y + 1000 + 10)
                    .attr("x2", d => d.x + 1000 + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y2", d => d.y - 1000 + 10)
                ;

                guideB
                    .attr("x1", d => d.x + 1000 + (d.name.length * boundingBoxWidthFactor) / 2 )
                    .attr("y1", d => d.y + 1000 + 10)
                    .attr("x2", d => d.x - 1000 + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y2", d => d.y - 1000 + 10)
                ;

                @* guideB
                    .attr("x1", d => d.x + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y1", d => d.y - 1000)
                    .attr("x2", d => d.x + (d.name.length * boundingBoxWidthFactor) / 2)
                    .attr("y2", d => d.y + 1000)
                ; *@
            }
        }

        function click(event, d) {
            delete d.fx;
            delete d.fy;
            d3.select(this).classed("fixed", false);
            simulation.alpha(1).restart();
        }

        function dragstart() {
            d3.select(this).classed("fixed", true);
        }

        function dragged(event, d) {
            d.fx = clamp(event.x, 0, width);
            d.fy = clamp(event.y, 0, height);
            simulation.alpha(1).restart();
        }

        function clamp(x, lo, hi) {
            return x < lo ? lo : x > hi ? hi : x;
        }

        const height = 1000;
        const width = 1000;

        const svg = d3.create("svg").attr("viewBox", [0, 0, width, height]),
            link = svg
                .selectAll(".link")
                .data(graph.links)
                .join("line")
                .classed("link", true)
            @* joint = svg
                .selectAll(".joint")
                .data(graph.links)
                .join("polygon")
                .attr("points", "0 0, 10 30, -10 30")
                .attr("r", 1)
                .classed("joint", true) *@
        ;

        @* const links = .selectAll(".link")
            .append("polygon")
            .attr("points", "250,60 100,400 400,400")
        ; *@

        const node = svg
            .selectAll(".node")
            .data(graph.nodes)
            .join("g")
            .classed("node", true)
            .classed("fixed", d => d.fx !== undefined)
        ;

        node.append("rect")
            .attr("width", d => d.name.length * boundingBoxWidthFactor)
            .attr("height", boundingBoxHeight)
        ;

        node.append("text")
            .attr("dy", ".80em")
            .attr("dx", ".40em")
            .classed("text", true)
            .text(d => d.name)
        ;

        let guideX = svg
            .selectAll(".guideX")
        ;
        let guideY = svg
            .selectAll(".guideY")
        ;
        let guideA = svg
            .selectAll(".guideA")
        ;
        let guideB = svg
            .selectAll(".guideB")
        ;

        if (withGuideLines) {
            guideX = guideX
                .data(graph.nodes)
                .join("line")
                .classed("guide", true)
                .classed("guideX", true)
            ;

            guideY = guideY
                .data(graph.nodes)
                .join("line")
                .classed("guide", true)
                .classed("guideY", true)
            ;

            guideA = guideA
                .data(graph.nodes)
                .join("line")
                .classed("guide", true)
                .classed("guide2", true)
            ;

            guideB = guideB
                .data(graph.nodes)
                .join("line")
                .classed("guide", true)
                .classed("guide2", true)
            ;
        }

        const simulation = d3
            .forceSimulation()
            .nodes(graph.nodes)
            .force("charge", d3.forceManyBody().strength(50))
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("link", d3.forceLink(graph.links).distance(100))
            .on("tick", tick)
        ;

        const drag = d3
            .drag()
            .on("start", dragstart)
            .on("drag", dragged)
        ;

        node.call(drag).on("click", click);

        const zoom = d3.zoom().on("zoom", e => {
            svg.attr("transform", (transform = e.transform));
        });

        svg
            .call(zoom)
            .call(zoom.transform, d3.zoomIdentity)
        ;

        const container = document.getElementById("container");
        while(container.firstChild){
            container.removeChild(container.firstChild);
        }
        container.append(svg.node());
    }
</script>

@code {

  [Parameter, EditorRequired] public IEnumerable<ModuleModel>? Modules { get; set; }
  [Parameter] public bool IsGuideLinesEnabled { get; set; } = true;

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    
     if (Modules is null) {
        return;
    }
    var modules = Modules.Where(x => x.Name is not null).ToArray();
    var map = modules.ToDictionary(x => x.Name);
    var links = new List<LinkModel>();
    for (int sourceIndex = 0; sourceIndex < modules.Length; sourceIndex++) 
    {
        var module = modules[sourceIndex];

        foreach (var reference in module.Uses) {
            if (!map.TryGetValue(reference, out var referencedModule)) 
            {
                continue;
            }

            var destinationIndex = Array.IndexOf(modules, referencedModule);

            links.Add(
                new ( 
                    From: new (
                        Index: sourceIndex, 
                        Name: modules[sourceIndex].Name
                    ), 
                    To: new (
                        Index: destinationIndex, 
                        Name: modules[destinationIndex].Name
                    ) 
                )
            );
        }
    }
    var graph = new {
        nodes = modules.Select(x => new { name = x.Name } ).ToArray(),
        links = links.Select(x => new {
            source = x.From.Index,
            sourceName = x.From.Name,
            target = x.To.Index,
            targetName = x.To.Name
        })
    };

    await js.InvokeVoidAsync("showGraph", graph, true);
  }

}
